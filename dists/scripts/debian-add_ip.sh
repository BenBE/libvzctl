#!/bin/bash
# Copyright (C) 1999-2015 Parallels IP Holdings GmbH
#
# This file is part of OpenVZ libraries. OpenVZ is free software; you can
# redistribute it and/or modify it under the terms of the GNU Lesser General
# Public License as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Our contact details: Parallels IP Holdings GmbH, Vordergasse 59, 8200
# Schaffhausen, Switzerland.
#
# This script configure IP alias(es) inside VPS for Debian like distros.
#
# Parameters are passed in environment variables.
# Required parameters:
#   IP_ADDR       - IP address(es) to add
#                   (several addresses should be divided by space)
# Optional parameters:
#   VE_STATE      - state of VPS; could be one of:
#                     starting | stopping | running | stopped
#   IPDELALL      - delete all ip addresses
#
VENET_DEV=venet0
CFGFILE=/etc/network/interfaces
HOSTFILE=/etc/hosts
USE_INET6=yes

function fix_networking_conf()
{
	local cfg=/etc/init/networking.conf

	[ ! -f ${cfg} ] && return 0

	if grep -q "udevtrigger" ${cfg} 2>/dev/null; then
		grep -v udevtrigger ${cfg} | \
			sed "s,(local-filesystems,local-filesystems,g" > ${cfg}.tmp && \
			mv -f ${cfg}.tmp ${cfg}
	fi
}

function setup_network()
{
	echo -e "# This configuration file is auto-generated.
# WARNING: Do not edit this file, otherwise your changes will be lost.
# Please edit template $CFGFILE.template instead.
" > ${CFGFILE}

	if [ -f ${CFGFILE}.template ]; then
		cat ${CFGFILE}.template >> ${CFGFILE}
	fi
	if ! grep -qw lo ${CFGFILE}; then
		echo "auto lo
iface lo inet loopback" >> ${CFGFILE}
	fi
	# Set up /etc/hosts
	if [ ! -f $HOSTFILE ]; then
		echo "127.0.0.1 localhost.localdomain localhost" > $HOSTFILE
	fi
	[ -z "${IP_ADDR}" ] && return
	echo -e "
# Auto generated venet0 interfaces
auto ${VENET_DEV}
iface ${VENET_DEV} inet static
	address 127.0.0.1
	netmask 255.255.255.255
	broadcast 0.0.0.0" >> ${CFGFILE}
	if [ "x${VE_STATE}" = "xstarting" -o "$(is_default_route_configured)" = "no" ]; then
		echo -e "\tup route add default dev ${VENET_DEV}" >> ${CFGFILE}
	fi

	if [ "${IPV6}" = "yes" ]; then
		if [ "${USE_INET6}" = "yes" ]; then
			echo -e "
iface ${VENET_DEV} inet6 static
	address ::2
	netmask 128" >> ${CFGFILE}
		else
			echo -e "\tup ip -6 a a ::2/128 dev ${VENET_DEV}" >> ${CFGFILE}
		fi
		if [ "x${VE_STATE}" = "xstarting" -o "$(is_default_route_configured '' '-6')" = "no" ]; then
			echo -e "\tup ip -6 r a default dev ${VENET_DEV}" >> ${CFGFILE}
		fi
	fi

	fix_networking_conf
}

function create_config()
{
	local ip=$1
	local mask=$2
	local ifnum=$3

	if [ -z "${mask}" ]; then
		mask=255.255.255.255
	fi
	echo -e "auto ${VENET_DEV}:${ifnum}
iface ${VENET_DEV}:${ifnum} inet static
	address ${ip}
	netmask $mask
" >> ${CFGFILE}.bak
}

function add_ip6()
{
	local ip=$1
	local mask=$2
	local proto=inet6

	[ "${IPV6}" != "yes" ] && return

	if [ "${USE_INET6}" != "yes" ]; then
		proto=inet
	fi

	if [ -n "${mask}" ]; then
		ip="${ip}/${mask}"
	else
		ip="${ip}/128"
	fi

	awk '
		BEGIN {found = 0}
		NF == 0 {next}
		!found && $1 == "iface" && $2 ~/'${VENET_DEV}'$/ && $3 == "'$proto'" {
			found = 1;
			print;
			next;
		}
		found == 1 && !/^\t/{
			print "\tup ip addr add '$ip' dev venet0";
			found++;
		}
		{print}
		END {
			if (found == 1) {
				print "\tup ip addr add '$ip' dev venet0";
			}
		}
	' < ${CFGFILE}.bak > ${CFGFILE}.$$ && mv -f ${CFGFILE}.$$ ${CFGFILE}.bak

	rm -f ${CFGFILE}.$$ 2>/dev/null
	if_restart=yes
}

function get_all_aliasid()
{
	IFNUM=-1

	IFNUMLIST=`grep -e "^auto ${VENET_DEV}:.*$" 2> /dev/null ${CFGFILE}.bak | sed "s/.*${VENET_DEV}://"`
}

function get_free_aliasid()
{
	local found=

	[ -z "${IFNUMLIST}" ] && get_all_aliasid
	while test -z ${found}; do
		let IFNUM=IFNUM+1
		echo "${IFNUMLIST}" | grep -q -E "^${IFNUM}$" 2>/dev/null || \
			found=1
	done
}

function add_ip()
{
	local ipm ip mask
	local found

	# IPv6 is not supported for ubuntu-8.04
	if grep -q "lenny" /etc/debian_version 2>/dev/null; then
		USE_INET6=no
	fi
	if [ "${VE_STATE}" = "starting" ]; then
		remove_debian_interface "${VENET_DEV}:[0-9]*" ${CFGFILE}
		setup_network
	elif ! grep -q "^auto ${VENET_DEV}\$" ${CFGFILE} 2>/dev/null; then
		setup_network
	fi
	if [ "${IPDELALL}" = "yes" ]; then
		ifdown ${VENET_DEV} >/dev/null 2>&1
		remove_debian_interface "${VENET_DEV}:[0-9]*" ${CFGFILE}
		setup_network
	fi
	cp -f ${CFGFILE} ${CFGFILE}.bak
	for ipm in ${IP_ADDR}; do
		ip=${ipm%%/*}
		mask=
		if echo "${ipm}" | grep -q '/'; then
			mask=${ipm##*/}
		fi
		found=

		if grep -qw -e "^[[:space:]]*address $ip" -e "^[[:space:]]*up ip addr add $ip" ${CFGFILE}.bak 2>/dev/null; then
			continue
		fi

		if is_ipv6 ${ip}; then
			add_ip6 "${ip}" "${mask}"
		else
			get_free_aliasid
			create_config "${ip}" "${mask}" "${IFNUM}"
		fi
	done
	mv -f ${CFGFILE}.bak ${CFGFILE}
	if [ "x${VE_STATE}" = "xrunning" ]; then
		[ -n "${if_restart}" ] && /sbin/ifdown venet0 2>/dev/null
		/sbin/ifup -a --force 2>/dev/null
	fi
}

add_ip
exit 0
